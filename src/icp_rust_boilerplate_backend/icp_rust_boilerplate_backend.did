type Airstrip = record {
  id : nat64;
  contact : text;
  name : text;
  created_at : nat64;
  email : text;
  capacity : nat64;
  runway_length : nat64;
  location : text;
};
type CapacityStatus = record {
  scheduled_arrivals : nat64;
  total_capacity : nat64;
  current_occupancy : nat64;
  available_slots : nat64;
  scheduled_departures : nat64;
};
type CreateAirstripPayload = record {
  contact : text;
  name : text;
  email : text;
  capacity : nat64;
  runway_length : nat64;
  location : text;
};
type EmergencyProtocol = record {
  id : nat64;
  description : text;
  created_at : nat64;
  contact_numbers : vec text;
  airstrip_id : nat64;
  evacuation_routes : vec text;
  protocol_type : text;
};
type Flight = record {
  id : nat64;
  status : text;
  destination : text;
  departure_time : nat64;
  flight_number : text;
  airstrip_id : nat64;
  arrival_time : nat64;
};
type FuelInventory = record {
  id : nat64;
  last_updated : nat64;
  airstrip_id : nat64;
  unit_price : float64;
  quantity : float64;
  fuel_type : text;
};
type MaintenanceSchedule = record {
  id : nat64;
  status : text;
  date : nat64;
  description : text;
  airstrip_id : nat64;
};
type Message = variant {
  Error : text;
  InvalidPayload : text;
  NotFound : text;
  Success : text;
};
type Pilot = record {
  id : nat64;
  license_number : text;
  contact : text;
  experience_years : nat64;
  name : text;
  email : text;
};
type PilotSchedule = record {
  id : nat64;
  status : text;
  end_time : nat64;
  pilot_id : nat64;
  start_time : nat64;
  flight_id : nat64;
};
type RegisterPilotPayload = record {
  license_number : text;
  contact : text;
  experience_years : nat64;
  name : text;
  email : text;
};
type Result = variant { Ok : Message; Err : Message };
type Result_1 = variant { Ok : Airstrip; Err : Message };
type Result_10 = variant { Ok : FuelInventory; Err : Message };
type Result_2 = variant { Ok : EmergencyProtocol; Err : Message };
type Result_3 = variant { Ok : CapacityStatus; Err : Message };
type Result_4 = variant { Ok : vec record { text; float64 }; Err : Message };
type Result_5 = variant { Ok : Revenue; Err : Message };
type Result_6 = variant { Ok : Pilot; Err : Message };
type Result_7 = variant { Ok : Flight; Err : Message };
type Result_8 = variant { Ok : MaintenanceSchedule; Err : Message };
type Result_9 = variant { Ok : PilotSchedule; Err : Message };
type Revenue = record {
  id : nat64;
  transaction_date : nat64;
  source : text;
  description : text;
  airstrip_id : nat64;
  amount : float64;
};
type ScheduleFlightPayload = record {
  destination : text;
  departure_time : nat64;
  flight_number : text;
  airstrip_id : nat64;
  arrival_time : nat64;
};
type ScheduleMaintenancePayload = record {
  date : nat64;
  description : text;
  airstrip_id : nat64;
};
service : {
  cancel_flight : (nat64) -> (Result);
  create_airstrip : (CreateAirstripPayload) -> (Result_1);
  create_emergency_protocol : (nat64, text, text, vec text, vec text) -> (
      Result_2,
    );
  get_airstrip_info : (nat64) -> (Result_1) query;
  get_capacity_status : (nat64) -> (Result_3) query;
  get_emergency_protocols : (nat64) -> (vec EmergencyProtocol) query;
  get_fuel_inventory : (nat64) -> (vec FuelInventory) query;
  get_pilot_schedule : (nat64) -> (vec PilotSchedule) query;
  get_revenue_analysis : (nat64, nat64, nat64) -> (Result_4) query;
  list_scheduled_flights : (nat64) -> (vec Flight) query;
  record_revenue : (nat64, text, float64, text) -> (Result_5);
  register_pilot : (RegisterPilotPayload) -> (Result_6);
  schedule_flight : (ScheduleFlightPayload) -> (Result_7);
  schedule_maintenance : (ScheduleMaintenancePayload) -> (Result_8);
  schedule_pilot : (nat64, nat64, nat64, nat64) -> (Result_9);
  update_airstrip_capacity : (nat64, nat64) -> (Result);
  update_fuel_inventory : (nat64, text, float64, float64) -> (Result_10);
}
